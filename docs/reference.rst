.. _api-reference:

API reference of DiddiParser 2
==============================

This document explains the internal API of DiddiParser 2

``diddiparser.parser`` -- parser configurations
-----------------------------------------------

This Python module configures the main DiddiScript parser, and
some useful variables.

.. py:module:: diddiparser2.parser

.. py:data:: TOOL_FUNCTIONS

   :type: tuple
   :value: ("cd", "chdir", "load_module", "load_extension", "print_available_functions")

   A tuple of special DiddiScript functions.

.. py:data:: MODULE_FUNCTIONS

   :type: dict
   :value: {}

   A ``name: callable`` dictionary of loaded modules and extensions.
   It works to define the function name, and its interpretation.

.. py:data:: EXECUTION_VARIABLES

   :type: dict
   :value: {}

   A ``name: value`` dictionary of defined variables.

.. py:class:: DiddiParser

   This class is the main DiddiScript parser.

   .. py:method:: __init__(self, file)
                  __init__(self, file, ignore_suffix=False)

      :param str file: The DiddiScript file to be parsed.
      :param bool ignore_suffix: If ``True``, tells DiddiParser to ignore the suffix mismatch.

      The constructor method. It reads the selected filename, and gets the commands via
      :py:meth:`diddiparser2.parser.DiddiParser.get_commands`.

   .. py:method:: get_commands(self)

      :return: A list of prepared commands.
      :rtype: list
      :raises diddiparser2.messages.error: When a syntax error is found.

      This function returns a list of DiddiScript commands, without comments. It can raise
      a compile error if there are missing semicolons (;).

   .. py:method:: executeline(self, line)

      :param str line: A line of DiddiScript code.
      :raises diddiparser2.messages.error: If the execution fails.

      Run a single line of code. It runs :py:meth:`diddiparser2.parser.DiddiParser.execute_def`
      and :py:meth:`diddiparser2.parser.DiddiParser.execute_func` when necessary.

   .. py:method:: execute_def(self, line)

      :param str line: A line of DiddiScript code.
      :raises diddiparser2.messages.error: If the execution fails.

      Execute a line with a variable definition, according to DSGP 1.

      .. seealso::

         `DSGP 1 <https://github.com/DiddiLeija/diddiparser2/blob/main/dsgp/dsgp-1.md>`_
           Read the DSGP that specifies the variable standards, and is used by
           this method.

   .. py:method:: execute_func(self, line)

      :param str line: A line of DiddiScript code.
      :raises diddiparser2.messages.error: If the execution fails.

      Execute a line with a function. It can be a tool function, or a loaded
      function.

   .. py:method:: parse_string_indexing(self, line)

      :param str line: A string.

      Format a string with variables, using the DSGP 1 specification.

      .. seealso::

         `DSGP 1 <https://github.com/DiddiLeija/diddiparser2/blob/main/dsgp/dsgp-1.md>`_
           Read the DSGP that specifies the variable indexing with strings,
           and is used by this method.

   .. py:method:: runfile(self)

      Runs :py:meth:`diddiparser2.parser.DiddiParser.executeline` for each line, and
      then prints a success message.

   .. py:method: print_command(self, cmd)

      :param str cmd: A formatted command.

      Prints the command as fancy as possible. By default, it
      only runs :py:func:`diddiparser2.messages.show_command`.

.. py:class:: InteractiveDiddiParser(DiddiParser)

   This is a subclass of :py:class:`diddiparser2.parser.DiddiParser`, which
   generates an interactive console to execute commands on real time. It
   left unchanged the methods from his ancestor (it only modified the ``__init__``
   and ``print_command``). However, it added some other methods, described below.

   .. py:method:: loop(self)

      Generates a "DiddiScript console" which calls
      :py:meth:`diddiparser2.parser.DiddiParser.executeline` for each line
      of input.

``diddiparser.messages`` -- Tools for user/parser interactions
--------------------------------------------------------------

These functions are used by the parser (generated by ``diddiparser2.parser``)
to interact with you as the "interpreter". Also, you can use some of this
functions in your extensions.

.. py:module:: diddiparser2.messages

.. py:exception:: error

   An exception (which is a direct subclass of ``Exception``) raised when
   a function decided to stop the program.

.. py:function:: run_error(msg)

   :raises error: at the end of the function.

   Prints a "run error" in red, and stop the executions. This
   function is used when something in the execution failed. In
   most of the cases, this function is used by libraries.

.. py:function:: compile_error(msg)

   :raises error: at the end of the function.

   This function prints a "compile error" in red, and stop
   all the executions. This is commonly raised by the parser
   when a syntax error appears, a missing function is called,
   etc.

.. py:function: show_command(cmd)

   Prints the command *cmd* on a fancy color.

.. py:function:: show_warning(msg)

   This function prints a warning in yellow. It does not
   stop the execution.

.. py:function:: success_message()

   This function is called by the parser to tell the user
   that the execution finished succesfully.
